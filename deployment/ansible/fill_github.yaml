---
- name: Fill GitHub with envs
  hosts: all
  become: yes
  vars:
    - github_token: "{{ GITHUB_TOKEN }}"
    - github_repository: "{{ GITHUB_REPOSITORY }}"
    - project_name: "{{ PROJECT_NAME }}"
    - docker_hub_username: "{{ DOCKER_HUB_USERNAME }}"
    - docker_hub_url: "{{ DOCKER_HUB_URL }}"
    - docker_hub_login_username: "{{ DOCKER_HUB_LOGIN_USERNAME}}"
    - backend_url: "{{ BACKEND_URL }}"
    - frontend_url: "{{ FRONTEND_URL }}"
    - database_name: "{{ DATABASE_NAME }}"
    - database_password: "{{ DATABASE_PASSWORD }}"
    - database_username: "{{ DATABASE_USERNAME }}"
    - docker_hub_password: "{{ DOCKER_HUB_PASSWORD }}"
    - portainer_url: "{{ PORTAINER_URL }}"
    - aws_s3_region: "{{ AWS_S3_REGION }}"
  tasks:
    - name: Create gh_token.txt file
      copy:
        content: "{{ github_token }}"
        dest: /home/code/gh_token.txt

    - name: Login to GitHub
      shell:
        cmd: "gh auth login --with-token < /home/code/gh_token.txt"
      register: github_login

    - name: Get repository variables
      shell:
        cmd: "gh variable list --repo {{ github_repository }}"
      register: repository_variables

    - name: Get AWS_ACCESS_KEY from iam.env file
      shell:
        cmd: "echo $(cat /home/code/iam.env | grep AWS_ACCESS_KEY | cut -d '=' -f2)"
      register: aws_access_key

    - name: Get AWS_SECRET_ACCESS_KEY from iam.env file
      shell:
        cmd: "echo $(cat /home/code/iam.env | grep AWS_SECRET_ACCESS_KEY | cut -d '=' -f2)"
      register: aws_secret_access_key

    - name: Create AWS_ACCESS_KEY and AWS_SECRET_ACCESS_KEY file
      copy:
        content: "{{ item.data }}"
        dest: "/home/code/{{ item.name }}"
      loop:
        - { name: AWS_ACCESS_KEY, data: "{{ aws_access_key.stdout }}" }
        - {
            name: AWS_SECRET_ACCESS_KEY,
            data: "{{ aws_secret_access_key.stdout }}",
          }

    - name: Set AWS_S3_ACCESS_KEY to GitHub variable
      shell:
        cmd: "gh variable set AWS_S3_ACCESS_KEY --repo {{ github_repository }} < /home/code/AWS_ACCESS_KEY"

    - name: Set AWS_S3_SECRET_ACCESS_KEY to GitHub secrets
      shell:
        cmd: "gh secret set AWS_S3_SECRET_ACCESS_KEY --repo {{ github_repository }} < /home/code/AWS_SECRET_ACCESS_KEY"

    - name: Delete AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY file
      file:
        path: "/home/code/{{ item }}"
        state: absent
      loop:
        - AWS_SECRET_ACCESS_KEY
        - AWS_ACCESS_KEY

    - name: Get Portainer backend webhook token
      shell:
        cmd: "cat /home/code/backend_webhook_token"
      register: backend_webhook_token

    - name: Get Portainer frontend webhook token
      shell:
        cmd: "cat /home/code/frontend_webhook_token"
      register: frontend_webhook_token

    - name: Set variables to GitHub
      shell:
        cmd: "gh variable set {{ item.name }} --repo {{ github_repository }} --body {{ item.data }}"
      loop:
        - { name: PROJECT_NAME, data: "{{ project_name }}" }
        - { name: PROJECT_NAME, data: "{{ project_name }}" }
        - { name: AWS_S3_BUCKET, data: "{{ project_name }}" }
        - { name: AWS_S3_REGION, data: "{{ aws_s3_region }}" }
        - {
            name: AWS_S3_ENDPOINT,
            data: "https://s3.amazonaws.com/{{ project_name }}",
          }
        - { name: DOCKER_HUB_USERNAME, data: "{{ docker_hub_username }}" }
        - {
            name: DOCKER_HUB_LOGIN_USERNAME,
            data: "{{ docker_hub_login_username }}",
          }
        - { name: DOCKER_HUB_URL, data: "{{ docker_hub_url }}" }
        - { name: NEXT_PUBLIC_BACKEND_URL, data: "https://{{ backend_url }}" }
        - { name: NEXT_PUBLIC_FRONTEND_URL, data: "https://{{ frontend_url }}" }
        - { name: DATABASE_NAME, data: "{{ database_name }}" }
        - {
            name: PORTAINER_STAGING_BACKEND_UPDATE_URL,
            data: "https://{{ portainer_url }}/api/webhooks/{{ backend_webhook_token.stdout }}",
          }
        - {
            name: PORTAINER_STAGING_FRONTEND_UPDATE_URL,
            data: "https://{{ portainer_url }}/api/webhooks/{{ frontend_webhook_token.stdout }}",
          }

    - name: Set secrets to GitHub
      shell:
        cmd: "gh secret set {{ item.name }} --repo {{ github_repository }} --body {{ item.data }}"
      loop:
        - { name: DATABASE_HOST, data: "{{ inventory_hostname }}" }
        - { name: DATABASE_PASSWORD, data: "{{ database_password }}" }
        - { name: DATABASE_USERNAME, data: "{{ database_username }}" }
        - { name: DOCKER_HUB_PASSWORD, data: "{{ docker_hub_password }}" }
