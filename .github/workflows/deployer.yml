name: Deployer
on:
  pull_request:
    types: [closed]
  # push:
  #   branches:
  #     - main

env:
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  deploy-project-to-server:
    if: contains(github.ref_name, 'deploy') && github.event.pull_request.merged == true
    timeout-minutes: 60
    name: Run ansible playbook
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployment/ansible
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: BRANCH_NAME
        run: echo ${{ env.BRANCH_NAME }}
      - name: Create inventory file
        run: |
          cp ./actions/inventory.yaml.example inventory.yaml
      - name: Replace ANSIBLE_HOST in inventory.yaml
        run: |
          sed -ie "s/ANSIBLE_HOST/${{ secrets.ANSIBLE_HOST }}/g" inventory.yaml
      - name: Replace ANSIBLE_PASSWORD in inventory.yaml
        run: |
          sed -ie "s/ANSIBLE_PASSWORD/${{ secrets.ANSIBLE_PASSWORD }}/g" inventory.yaml
      - name: Add deployer secrets to env file
        run: |
          echo -e "PROJECT_NAME=${{ secrets.PROJECT_NAME }}\n" >> .env
          echo -e "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}\n" >> .env
          echo -e "DOCKER_HUB_LOGIN_USERNAME=${{ secrets.DOCKER_HUB_LOGIN_USERNAME }}\n" >> .env
          echo -e "DOCKER_HUB_URL=${{ secrets.DOCKER_HUB_URL }}\n" >> .env
          echo -e "DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}\n" >> .env
          echo -e "ANSIBLE_HOST=${{ secrets.ANSIBLE_HOST }}\n" >> .env
          echo -e "ANSIBLE_PASSWORD=${{ secrets.ANSIBLE_PASSWORD }}\n" >> .env
          echo -e "ROOT_AWS_ACCESS_KEY=${{ secrets.ROOT_AWS_ACCESS_KEY }}\n" >> .env
          echo -e "ROOT_AWS_SECRET_ACCESS_KEY=${{ secrets.ROOT_AWS_SECRET_ACCESS_KEY }}\n" >> .env
          echo -e "ROOT_CLOUDFLARE_ACCOUNT_API_KEY=${{ secrets.ROOT_CLOUDFLARE_ACCOUNT_API_KEY }}\n" >> .env
          echo -e "ROOT_CLOUDFLARE_ACCOUNT_EMAIL=${{ secrets.ROOT_CLOUDFLARE_ACCOUNT_EMAIL }}\n" >> .env
          echo -e "ROOT_SENTRY_API_KEY=${{ secrets.ROOT_SENTRY_API_KEY }}\n" >> .env
          echo -e "ROOT_SENTRY_ORGANIZATION_SLUG=${{ secrets.ROOT_SENTRY_ORGANIZATION_SLUG }}\n" >> .env
          echo -e "ROOT_SENTRY_TEAM_SLUG=${{ secrets.ROOT_SENTRY_TEAM_SLUG }}\n" >> .env
          echo -e "DOMAIN=${{ secrets.DOMAIN }}\n" >> .env
          echo -e "JWT_SECRET=${{ secrets.JWT_SECRET }}\n" >> .env
          echo -e "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}\n" >> .env
          echo -e "APP_KEYS=${{ secrets.APP_KEYS }}\n" >> .env
          echo -e "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}\n" >> .env
          echo -e "DATABASE_NAME=${{ secrets.DATABASE_NAME }}\n" >> .env
          echo -e "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}\n" >> .env
          echo -e "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}\n" >> .env
          echo -e "PORTAINER_USERNAME=${{ secrets.PORTAINER_USERNAME }}\n" >> .env
          echo -e "PORTAINER_PASSWORD=${{ secrets.PORTAINER_PASSWORD }}\n" >> .env
          echo -e "PORTAINER_SERVICE_SUBDOMAIN=${{ secrets.PORTAINER_SERVICE_SUBDOMAIN }}\n" >> .env
          echo -e "TRAEFIK_USERNAME=${{ secrets.TRAEFIK_USERNAME }}\n" >> .env
          echo -e "TRAEFIK_PASSWORD=${{ secrets.TRAEFIK_PASSWORD }}\n" >> .env
          echo -e "TRAEFIK_SERVICE_SUBDOMAIN=${{ secrets.TRAEFIK_SERVICE_SUBDOMAIN }}\n" >> .env
          echo -e "BACKEND_SERVICE_NAME=${{ secrets.BACKEND_SERVICE_NAME }}\n" >> .env
          echo -e "BACKEND_SERVICE_SUBDOMAIN=${{ secrets.BACKEND_SERVICE_SUBDOMAIN }}\n" >> .env
          echo -e "BACKEND_DOCKER_HUB_REPOSITORY_NAME=${{ secrets.BACKEND_DOCKER_HUB_REPOSITORY_NAME }}\n" >> .env
          echo -e "FRONTEND_SERVICE_NAME=${{ secrets.FRONTEND_SERVICE_NAME }}\n" >> .env
          echo -e "FRONTEND_SERVICE_SUBDOMAIN=${{ secrets.FRONTEND_SERVICE_SUBDOMAIN }}\n" >> .env
          echo -e "FRONTEND_DOCKER_HUB_REPOSITORY_NAME=${{ secrets.FRONTEND_DOCKER_HUB_REPOSITORY_NAME }}\n" >> .env
          echo -e "DOCUMENTATION_SERVICE_NAME=${{ secrets.DOCUMENTATION_SERVICE_NAME }}\n" >> .env
          echo -e "DOCUMENTATION_SERVICE_SUBDOMAIN=${{ secrets.DOCUMENTATION_SERVICE_SUBDOMAIN }}\n" >> .env
          echo -e "DOCUMENTATION_DOCKER_HUB_REPOSITORY_NAME=${{ secrets.DOCUMENTATION_DOCKER_HUB_REPOSITORY_NAME }}\n" >> .env
          echo -e "GITHUB_TOKEN=${{ secrets.GH_TOKEN }}\n" >> .env
          echo -e "GITHUB_REPOSITORY=${{ github.repository_owner }}/${{ github.event.repository.name }}\n" >> .env
      - name: Check inventory.yaml and .env file
        run: |
          cat .env
          cat inventory.yaml
      - name: Make scripts files executable
        run: |
          chmod +x \
            ./server.sh \
            ./aws.sh \
            ./traefik.sh \
            ./portainer.sh \
            ./postgres.sh \
            ./backend.sh \
            ./frontend.sh
      - name: Server Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-traefik' || env.BRANCH_NAME == 'deploy-portainer' || env.BRANCH_NAME == 'deploy-aws' || env.BRANCH_NAME == 'deploy-frontend' || env.BRANCH_NAME == 'deploy-backend' || env.BRANCH_NAME == 'deploy-documentation' }}
        run: ./server.sh

      - name: AWS Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'undeploy-aws' || env.BRANCH_NAME == 'redeploy-aws' }}
        run: ./aws.sh down
      - name: AWS Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-aws' || env.BRANCH_NAME == 'deploy-backend' || env.BRANCH_NAME == 'redeploy-backend' }}
        run: ./aws.sh

      - name: Traefik Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'undeploy-traefik' || env.BRANCH_NAME == 'redeploy-traefik' }}
        run: ./traefik.sh down
      - name: Traefik Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-traefik' || env.BRANCH_NAME == 'redeploy-traefik' }}
        run: ./traefik.sh

      - name: Portainer Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'redeploy-portainer' || env.BRANCH_NAME == 'undeploy-portainer' }}
        run: ./portainer.sh down
      - name: Portainer Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'redeploy-portainer' || env.BRANCH_NAME == 'deploy-portainer' }}
        run: ./portainer.sh

      - name: Postgres Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'redeploy-postgres' }}
        run: ./postgres.sh down
      - name: Postgres Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-postgres' || env.BRANCH_NAME == 'redeploy-postgres' || env.BRANCH_NAME == 'deploy-backend' }}
        run: ./postgres.sh

      - name: Backend Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'deploy-backend' || env.BRANCH_NAME == 'redeploy-backend' }}
        run: ./backend.sh down
      - name: Backend Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-backend' || env.BRANCH_NAME == 'redeploy-backend' }}
        run: ./backend.sh

      - name: Frontend Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'undeploy-frontend' || env.BRANCH_NAME == 'redeploy-frontend' }}
        run: ./frontend.sh down
      - name: Frontend Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-frontend' }}
        run: ./frontend.sh

      - name: Documentation Down
        if: ${{ env.BRANCH_NAME == 'undeploy' || env.BRANCH_NAME == 'undeploy-documentation' || env.BRANCH_NAME == 'redeploy-documentation' }}
        run: ./documentation.sh down
      - name: Documentation Up
        if: ${{ env.BRANCH_NAME == 'deploy' || env.BRANCH_NAME == 'deploy-documentation' }}
        run: ./documentation.sh
